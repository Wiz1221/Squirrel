#!/usr/bin/env node
/* eslint strict: 0 */

'use strict';

/**
 * Module dependencies.
 */

// enables ES6 ('import'.. etc) in Node
require('babel-core/register');
require('babel-polyfill');

const app = require('../app').default;
const debug = require('debug')('backend:server');
const http = require('http');

// import socket.io
const socket = require('socket.io');

/**
 * Normalize a port into a number, string, or false.
 */

const normalizePort = function(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
};

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3001');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, () => {
  console.log('listening to port: '+port);
});

// socket.io
const io = socket(server);

io.on('connection', (socket) =>{
  console.log('made socket connection', socket.id);
  //handle chat messages
  socket.on('new-message', (msg) => {
    console.log(msg)
    io.sockets.emit("receive-message", msg);
  });
  //handle typing message notification
  socket.on('typing', (data) => {
    socket.broadcast.emit('typing', data);
  });

});



/**
 * Event listener for HTTP server "error" event.
 */

server.on('error', (error) => {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
   ? `Pipe ${port}`
   : `Port ${port}`;

   // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      debug(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      debug(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
});

/**
 * Event listener for HTTP server "listening" event.
 */

server.on('listening', () => {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? `pipe ${addr}`
    : `port ${addr.port}`;
  debug(`Listening on ${bind}`);
});
